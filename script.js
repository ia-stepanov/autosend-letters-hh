// –í–ê–® –†–ï–ó–Æ–ú–ï ID (–ë–ï–ó –≠–¢–û–ì–û –ö–û–î –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨!!!)
const RESUME_ID_ATTRIBUTE = '#–í–ê–® –†–ï–ó–Æ–ú–ï ID' // –ü—Ä–∏–º–µ—Ä: #resume_0c74c60fff0b6bd3c90039ed1f6f7669436378

const COVER_LETTER_TEMPLATE = (vacancyName) => `
–î–æ–±—Ä—ã–π –¥–µ–Ω—å! 

–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –í–∞–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è ${vacancyName}. –û–∑–Ω–∞–∫–æ–º–∏–≤—à–∏—Å—å —Å¬†–ø–µ—Ä–µ—á–Ω–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫¬†–∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º, –ø—Ä–∏—à–µ–ª –∫¬†–≤—ã–≤–æ–¥—É, —á—Ç–æ –º–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞¬†–¥–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å. 

–û–±–ª–∞–¥–∞—é –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—é –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏. –í¬†—Ä–∞–±–æ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω, –ø—É–Ω–∫—Ç—É–∞–ª–µ–Ω –∏¬†–∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª–µ–Ω.

–ë—É–¥—É —Å¬†–Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏¬†–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –∏¬†–≤–∑–∞–∏–º–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞¬†—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è. 

–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—é.
`

const DELAY_SHORT = 500
const DELAY_LONG = 1000
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms))

let isRunning = false // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

const createElement = (item, attribute, title) => {
  item.classList.add(
    'supernova-navi-item',
    'supernova-navi-item_lvl-2',
    'supernova-navi-item_no-mobile'
  )

  item.innerHTML = `
    <a data-qa="mainmenu_vacancyResponses" class="supernova-link" ${attribute}>
      ${title}
    </a>
    <div class="supernova-navi-underline">${title}</div>
  `
}

const addNavLinks = async () => {
  await delay(DELAY_LONG)

  const navLinks = document.querySelectorAll(
    '.supernova-navi-item.supernova-navi-item_lvl-2'
  )

  const itemLetters = document.createElement('div')
  createElement(itemLetters, 'handler-letters', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏')
  navLinks[2].append(itemLetters)

  document
    .querySelector('[handler-letters]')
    .addEventListener('click', toggleInit)
}

const toggleInit = async () => {
  const button = findElementByText('a', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏')

  if (isRunning) {
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    isRunning = false
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏'
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
  } else {
    // –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    isRunning = true
    button.textContent = '–°—Ç–æ–ø'
    console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç–∫–ª–∏–∫–æ–≤')
    await init()
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏'
    isRunning = false
  }
}

const selectResume = () => {
  const resume = document.querySelector(RESUME_ID_ATTRIBUTE)
  const messageToggle = document.querySelector(
    '[data-qa="vacancy-response-letter-toggle"]'
  )

  resume?.click()
  messageToggle?.click()
}

const handlerCoverLetter = () => {
  const vacancyTitleElement = document.querySelector(
    '.bloko-modal-header_outlined > div'
  )

  const vacancyName = vacancyTitleElement?.textContent.trim() || '–≤–∞–∫–∞–Ω—Å–∏—è'
  const messageArea = document.querySelector(
    '[data-qa="vacancy-response-popup-form-letter-input"]'
  )

  if (messageArea) {
    messageArea.value = COVER_LETTER_TEMPLATE(vacancyName)
    messageArea.dispatchEvent(new Event('change'))
  }

  const submitButton = document.querySelector(
    '[data-qa="vacancy-response-submit-popup"]'
  )
  submitButton?.click()
}

const handleRelocationWarning = () => {
  const relocationButton = document.querySelector(
    '[data-qa="relocation-warning-confirm"]'
  )
  relocationButton?.click()
}

const init = async () => {
  const vacancies = findElementsByTextContains(
    'magritte-button__label',
    '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'
  )

  for (let i = 0; i < vacancies.length; i++) {
    if (!isRunning) break

    console.log(`üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${i + 1}`)
    vacancies[i].click()
    vacancies.shift() // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    await delay(DELAY_LONG)

    if (document.querySelector('[data-qa="relocation-warning-title"]')) {
      handleRelocationWarning()
      await delay(DELAY_SHORT)
    }

    if (document.querySelector(RESUME_ID_ATTRIBUTE)) {
      selectResume()
      await delay(DELAY_SHORT)
      handlerCoverLetter()
      await delay(DELAY_LONG)
    } else {
      console.log('‚ö†Ô∏è –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏')
    }

    await delay(DELAY_SHORT)
  }
}

function findElementsByTextContains(className, text) {
  return Array.from(document.querySelectorAll('span')).filter(
    (element) =>
      element.classList.toString().includes(className) &&
      element.textContent.includes(text)
  )
}

function findElementByText(tagName, text) {
  return Array.from(document.querySelectorAll(tagName)).find(
    (element) => element.textContent.trim() === text
  )
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
addNavLinks()
